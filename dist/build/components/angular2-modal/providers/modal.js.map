{"version":3,"file":"modal.js","sourceRoot":"","sources":["modal.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Type,\r\n  ReflectiveInjector,\r\n  ViewContainerRef,\r\n  Injectable,\r\n  ResolvedReflectiveProvider,\r\n  Optional\r\n} from '@angular/core';\r\n\r\nimport {\r\n  ModalRenderer,\r\n  ModalCompileConfig,\r\n  ModalBackdropComponent,\r\n  ModalDropInFactory\r\n} from '../models/tokens';\r\n\r\nimport { DialogRefStack } from '../models/dialog-ref-stack';\r\nimport { DialogRef } from '../models/dialog-ref';\r\nimport { ModalContext, ModalControllingContextBuilder } from '../models/modal-context';\r\n\r\nconst _stack = new DialogRefStack<any>();\r\nconst unsupportedDropIn: any = () => {\r\n  throw new Error('Unsupported Drop-in.');\r\n};\r\n\r\nconst UnsupportedDropInFactory: ModalDropInFactory = {\r\n  alert: unsupportedDropIn,\r\n  prompt: unsupportedDropIn,\r\n  confirm: unsupportedDropIn\r\n};\r\n\r\nfunction normalizeDropInFactory(dropInFactory: ModalDropInFactory): ModalDropInFactory {\r\n  if (!dropInFactory) return UnsupportedDropInFactory;\r\n  return ['alert', 'prompt', 'confirm']\r\n    .reduce((dif, key) => {\r\n      if (typeof dif[key] !== 'function') dif[key] = <any>unsupportedDropIn;\r\n      return dif;\r\n    }, dropInFactory);\r\n}\r\n\r\n@Injectable()\r\nexport class Modal {\r\n  /**\r\n   * A Default view container ref, usually the app root container ref.\r\n   * Make sure not to provide something that might get destroyed, it will destroy the modals too.\r\n   * The container is used as logical view holder, elements might be moved.\r\n   * Has to be set manually until we can find a way to get it automatically.\r\n   */\r\n  public defaultViewContainer: ViewContainerRef;\r\n  private _dropIn: ModalDropInFactory;\r\n\r\n  constructor(private _modalRenderer: ModalRenderer,\r\n              private _backdrop: ModalBackdropComponent,\r\n              @Optional() _dropIn: ModalDropInFactory) {\r\n    this._dropIn = normalizeDropInFactory(_dropIn);\r\n  }\r\n\r\n  alert(): ModalControllingContextBuilder<any> {\r\n    return this._dropIn.alert<any>(this);\r\n  }\r\n\r\n  prompt(): ModalControllingContextBuilder<any> {\r\n    return this._dropIn.prompt<any>(this);\r\n  }\r\n\r\n  confirm(): ModalControllingContextBuilder<any> {\r\n    return this._dropIn.confirm<any>(this);\r\n  }\r\n\r\n  /**\r\n   * Opens a modal window inside an existing component.\r\n   * If\r\n   * @param componentType The angular Component to render as the modal content.\r\n   * @param bindings Resolved providers that will inject into the component provided.\r\n   * @param context The context for the modal, attached to the dialog instance, DialogRef.context.\r\n   *        Default: {}\r\n   * @param viewContainer The element to block using the modal.\r\n   *        Default: The value set in defaultViewContainer.\r\n   * @param inside If true, render's the component inside the ViewContainerRef,\r\n   *        otherwise render's the component in the root element (body in DOM)\r\n   *        Default: true if ViewContainer supplied, false if not supplied.\r\n   * @returns {Promise<DialogRef>}\r\n   */\r\n  public open(componentType: Type,\r\n              context: ModalContext = undefined,\r\n              bindings: ResolvedReflectiveProvider[] = undefined,\r\n              viewContainer: ViewContainerRef = undefined,\r\n              inside?: boolean): Promise<DialogRef<any>> {\r\n    inside = inside === undefined ? !!viewContainer : !!inside;\r\n\r\n    if (!viewContainer) {\r\n      if (!this.defaultViewContainer) {\r\n        throw new Error('defaultViewContainer not set.');\r\n      }\r\n      viewContainer = this.defaultViewContainer;\r\n    }\r\n\r\n    if (context) {\r\n      context.normalize();\r\n    }\r\n\r\n    let dialog = new DialogRef(context || {});\r\n    dialog.inElement = inside;\r\n\r\n    let compileConfig = new ModalCompileConfig(componentType, bindings || []);\r\n\r\n\r\n    let b = ReflectiveInjector.resolve([\r\n      {provide: Modal, useValue: this},\r\n      {provide: ModalRenderer, useValue: this._modalRenderer},\r\n      {provide: DialogRef, useValue: dialog},\r\n      {provide: ModalCompileConfig, useValue: compileConfig}\r\n    ]);\r\n\r\n    this._modalRenderer.render(this._backdrop, viewContainer, b, dialog);\r\n    _stack.pushManaged(dialog);\r\n    dialog.onDestroy.subscribe( () => _stack.remove(dialog) );\r\n\r\n    return Promise.resolve(dialog);\r\n  }\r\n\r\n  /**\r\n   * Check if a given DialogRef is the top most ref in the stack.\r\n   * TODO: distinguish between body modal vs in element modal.\r\n   * @param dialogRef\r\n   * @returns {boolean}\r\n   */\r\n  isTopMost(dialogRef: DialogRef<any>): boolean {\r\n    return _stack.indexOf(dialogRef) === _stack.length - 1;\r\n  }\r\n\r\n  stackPosition(dialogRef: DialogRef<any>) {\r\n    return _stack.indexOf(dialogRef);\r\n  }\r\n\r\n  get stackLength(): number {\r\n    return _stack.length;\r\n  }\r\n}\r\n"]}