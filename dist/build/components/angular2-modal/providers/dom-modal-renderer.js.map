{"version":3,"file":"dom-modal-renderer.js","sourceRoot":"","sources":["dom-modal-renderer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAKO,eAAe,CAAC,CAAA;AAEvB,gCAA4B,8BAA8B,CAAC,CAAA;AAK3D;IACE,0BAAoB,GAA6B;QAA7B,QAAG,GAAH,GAAG,CAA0B;IACjD,CAAC;IAED,iCAAM,GAAN,UAAO,IAAS,EACT,aAA+B,EAC/B,QAAsC,EACtC,MAAsB;QAG3B,IAAM,MAAM,GAAG,yBAAe,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QAExE,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACrB,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACjF,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,SAAS,CAAE;YAC1B,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,QAAQ,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,IAAI,CAAG,cAAM,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAE,CAAC;YAC/D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IA5BH;QAAC,iBAAU,EAAE;;wBAAA;IA6Bb,uBAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,wBAAgB,mBA4B5B,CAAA","sourcesContent":["import {\r\n  ViewContainerRef,\r\n  ComponentFactoryResolver,\r\n  ResolvedReflectiveProvider,\r\n  Injectable\r\n} from '@angular/core';\r\n\r\nimport createComponent from '../framework/createComponent';\r\nimport { DialogRef } from '../models/dialog-ref';\r\nimport { ModalRenderer } from '../models/tokens';\r\n\r\n@Injectable()\r\nexport class DOMModalRenderer implements ModalRenderer {\r\n  constructor(private _cr: ComponentFactoryResolver) {\r\n  }\r\n\r\n  render(type: any,\r\n         viewContainer: ViewContainerRef,\r\n         bindings: ResolvedReflectiveProvider[],\r\n         dialog: DialogRef<any>): DialogRef<any> {\r\n\r\n\r\n    const cmpRef = createComponent(this._cr, type, viewContainer, bindings);\r\n\r\n    if (dialog.inElement) {\r\n      viewContainer.element.nativeElement.appendChild(cmpRef.location.nativeElement);\r\n    } else {\r\n      document.body.appendChild(cmpRef.location.nativeElement);\r\n    }\r\n\r\n    dialog.onDestroy.subscribe( () => {\r\n      if (typeof cmpRef.instance.canDestroy === 'function') {\r\n        cmpRef.instance.canDestroy().then ( () => cmpRef.destroy() );\r\n      } else {\r\n        cmpRef.destroy();\r\n      }\r\n    });\r\n\r\n    return dialog;\r\n  }\r\n}\r\n\r\n"]}