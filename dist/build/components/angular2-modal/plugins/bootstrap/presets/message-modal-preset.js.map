{"version":3,"file":"message-modal-preset.js","sourceRoot":"","sources":["message-modal-preset.ts"],"names":[],"mappings":";;;;;;AAAA,8BAA+D,kCAAkC,CAAC,CAAA;AAElG,8BAAsD,kBAAkB,CAAC,CAAA;AACzE,8BAA+B,kBAAkB,CAAC,CAAA;AAClD,sBAAmC,0BAA0B,CAAC,CAAA;AAG9D,IAAM,cAAc,GAAG;IACnB,SAAS,EAAE,8BAAc;IACzB,WAAW,EAAE,cAAc;IAC3B,SAAS,EAAE,YAAY;IACvB,WAAW,EAAE,cAAc;CAC9B,CAAC;AAEF,IAAM,eAAe,GAAG;IACpB,aAAa;IACb,OAAO;IACP,WAAW;IACX,WAAW;IACX,aAAa;CAChB,CAAC;AA2DF;;;;GAIG;AACH;IACwE,6CAAwB;IAkD5F,mCACI,aAA4B,EAC5B,cAAoC,EACpC,QAAiC;QAFjC,6BAA4B,GAA5B,yBAA4B;QAC5B,8BAAoC,GAApC,0BAAoC;QACpC,wBAAiC,GAAjC,oBAAiC;QAEjC,kBACI,cAAM,CAAM,cAAM,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,EAAE,cAAc,CAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EACvE,kBAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACX,CAAC;QAEF,8BAAc,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,6CAAS,GAAT,UAAU,GAAW,EAAE,OAAe,EAAE,OAAoC;QACxE,IAAI,GAAG,GAAG;YACN,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;SACnB,CAAC;QAEF,IAAI,GAAG,GAAG,0BAAU,CAAC,SAAS,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAkC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEtD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,gCAAC;AAAD,CAAC,AA7ED,CACwE,qCAAqB,GA4E5F;AA7EqB,iCAAyB,4BA6E9C,CAAA","sourcesContent":["import { FluentAssignMethod, privateKey, setAssignAlias } from '../../../framework/fluent-assign';\r\nimport { BSMessageModalButtonConfig, BSMessageModalButtonHandler } from '../message-modal';\r\nimport { BSModalContext, BSModalContextBuilder}  from '../modal-context';\r\nimport { BSMessageModal } from '../message-modal';\r\nimport { extend, arrayUnion } from '../../../framework/utils';\r\n\r\n\r\nconst DEFAULT_VALUES = {\r\n    component: BSMessageModal,\r\n    headerClass: 'modal-header',\r\n    bodyClass: 'modal-body',\r\n    footerClass: 'modal-footer'\r\n};\r\n\r\nconst DEFAULT_SETTERS = [\r\n    'headerClass',\r\n    'title',\r\n    'titleHtml',\r\n    'bodyClass',\r\n    'footerClass'\r\n];\r\n\r\n\r\n/**\r\n * Data definition\r\n */\r\nexport interface MessageModalPreset extends BSModalContext {\r\n\r\n    /**\r\n     * A Class for the header (title) container.\r\n     * Default: modal-header\r\n     */\r\n    headerClass: string;\r\n\r\n    /**\r\n     * Caption for the title, enclosed in a H3 container.\r\n     */\r\n    title: string;\r\n\r\n    /**\r\n     * HTML for the title, if set overrides title property.\r\n     * The HTML is wrapped in a DIV element, inside the header container.\r\n     * Example:\r\n     <div class=\"modal-header\">\r\n     <div> HTML CONTENT INSERTED HERE </div>\r\n     </div>\r\n     * Note: HTML is not compiled.\r\n     */\r\n    titleHtml: string;\r\n\r\n    /**\r\n     * aliased by 'body'\r\n     * @aliasedBy body\r\n     */\r\n    message: string;\r\n\r\n    /**\r\n     * The body of the modal.\r\n     * Can be either text or HTML.\r\n     * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\r\n     * @aliasOf message\r\n     */\r\n    body: string;\r\n\r\n    /**\r\n     * A Class for the body container.\r\n     * Default: modal-body\r\n     */\r\n    bodyClass: string;\r\n\r\n    /**\r\n     * A Class for the footer container.\r\n     * Default: modal-footer\r\n     */\r\n    footerClass: string;\r\n\r\n    buttons: BSMessageModalButtonConfig[];\r\n}\r\n\r\n/**\r\n * A Preset representing the configuration needed to open MessageModal.\r\n * This is an abstract implementation with no concrete behaviour.\r\n * Use derived implementation.\r\n */\r\nexport abstract class MessageModalPresetBuilder<T extends MessageModalPreset>\r\n                                                                extends BSModalContextBuilder<T> {\r\n\r\n    /**\r\n     * A Class for the header (title) container.\r\n     * Default: modal-header\r\n     */\r\n    headerClass: FluentAssignMethod<string, this>;\r\n\r\n    /**\r\n     * Caption for the title, enclosed in a H3 container.\r\n     */\r\n    title: FluentAssignMethod<string, this>;\r\n\r\n    /**\r\n     * HTML for the title, if set overrides title property.\r\n     * The HTML is wrapped in a DIV element, inside the header container.\r\n     * Example:\r\n     <div class=\"modal-header\">\r\n     <div> HTML CONTENT INSERTED HERE </div>\r\n     </div>\r\n     * Note: HTML is not compiled.\r\n     */\r\n    titleHtml: FluentAssignMethod<string, this>;\r\n\r\n    /**\r\n     * aliased by 'body'\r\n     * @aliasedBy body\r\n     */\r\n    message: FluentAssignMethod<string, this>;\r\n\r\n    /**\r\n     * The body of the modal.\r\n     * Can be either text or HTML.\r\n     * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\r\n     * @aliasOf message\r\n     */\r\n    body: FluentAssignMethod<string, this>;\r\n\r\n    /**\r\n     * A Class for the body container.\r\n     * Default: modal-body\r\n     */\r\n    bodyClass: FluentAssignMethod<string, this>;\r\n\r\n    /**\r\n     * A Class for the footer container.\r\n     * Default: modal-footer\r\n     */\r\n    footerClass: FluentAssignMethod<string, this>;\r\n\r\n    constructor(\r\n        defaultValues: T = undefined,\r\n        initialSetters: string[] = undefined,\r\n        baseType: new () => T = undefined\r\n    ) {\r\n        super(\r\n            extend<any>(extend({buttons: []}, DEFAULT_VALUES), defaultValues || {}),\r\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\r\n            baseType\r\n        );\r\n\r\n        setAssignAlias(this, 'body', 'message', true);\r\n    }\r\n    \r\n    addButton(css: string, caption: string, onClick: BSMessageModalButtonHandler): this {\r\n        let btn = {\r\n            cssClass: css,\r\n            caption: caption,\r\n            onClick: onClick\r\n        };\r\n\r\n        let key = privateKey('buttons');\r\n        (this[key] as BSMessageModalButtonConfig[]).push(btn);\r\n        \r\n        return this;\r\n    }\r\n}\r\n"]}